{"version":3,"sources":["components/cake.jpg","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","AppBar","position","style","background","boxShadow","Toolbar","padding","Grid","container","alignItems","item","md","xs","justify","src","cake","width","Typography","variant","icon","faPhoneAlt","faMapMarkerAlt","faCaretDown","verticalAlign","faList","App","className","color","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,yOCuE5BC,EA3DA,WAUX,OAEI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAAUC,MAAO,CAAEC,WAAY,cAAeC,UAAW,SACtE,kBAACC,EAAA,EAAD,CAASH,MAAO,CAACI,QAAS,IACtB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAEfC,WAAW,YAEX,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAIC,GAAI,EAAIC,QAAQ,aAAaX,MAAO,CAACI,QAAS,IACjE,yBAAKQ,IAAKC,IAAMb,MAAO,CAAEc,MAAO,GAAIV,QAAS,MAO5C,kBAACC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAIC,GAAI,IAExB,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAIC,GAAI,GACvB,kBAACK,EAAA,EAAD,CAAYC,QAAQ,MACpB,kBAAC,IAAD,CAAiBC,KAAMC,MADvB,oBAOA,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAIC,GAAI,GACvB,kBAACK,EAAA,EAAD,CAAYC,QAAQ,MACpB,kBAAC,IAAD,CAAiBC,KAAME,MADvB,oBAC4D,kBAAC,IAAD,CAAiBF,KAAMG,QAInF,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAAEC,GAAI,EAAIC,GAAI,EAAGV,MAAO,CAACqB,cAAe,WAClD,kBAACN,EAAA,EAAD,CAAYC,QAAQ,MAApB,aACgB,kBAAC,IAAD,CAAiBC,KAAMK,YCnBxCC,MA/Bf,WACE,OAEE,yBAAKC,UAAU,OAEb,yBAAKA,UAAU,UACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,UAAUxB,MAAO,CAAEyB,MAAO,UACvC,+CADF,kCAGA,6BAHA,2CAKC,6BALD,oDASA,yBAAKD,UAAU,aACb,4CAEF,yBAAKA,UAAU,eACb,iCACA,4BAAQxB,MAAO,CAAC0B,gBAAgB,aAChC,oCClBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab266823.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cake.966dc066.jpg\";","import { AppBar, Grid, IconButton, Toolbar, Typography } from \"@material-ui/core\";\nimport  MenuIcon  from \"@material-ui/icons/Menu\"\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport ListIcon from '@material-ui/icons/List';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPhoneAlt,faMapMarkerAlt, faCaretDown, faList } from '@fortawesome/free-solid-svg-icons'\nimport cake from './cake.jpg'\n\nimport React from \"react\";\n\nconst Navbar = () => {\n\n    const styles = theme => ({\n        icon: {\n            position: \"relative\",\n            top: theme.spacing.unit,\n            width: theme.typography.display1.fontSize,\n            height: theme.typography.display1.fontSize\n        }\n    });\n    return (\n        \n        <AppBar position=\"static\"  style={{ background: 'transparent', boxShadow: 'none' }}>\n            <Toolbar style={{padding: 0}}>\n                <Grid container\n                \n                alignItems=\"flex-end\"\n                >\n                <Grid item md={1}  xs={1}  justify=\"flex-start\" style={{padding: 0}}>\n                <img src={cake} style={{ width: 50, padding: 0 }}>\n                \n\n                </img>\n                \n                 </Grid>\n\n                 <Grid item md={4}  xs={4} ></Grid>\n                \n                <Grid item md={2}  xs={2}  >\n                <Typography variant=\"h7\" >\n                <FontAwesomeIcon icon={faPhoneAlt} /> &nbsp;Contact Us \n                   \n                </Typography>\n                </Grid>\n\n\n                <Grid item md={3}  xs={3}  >\n                <Typography variant=\"h7\" >\n                <FontAwesomeIcon icon={faMapMarkerAlt} /> &nbsp;Delivery In <FontAwesomeIcon icon={faCaretDown} />\n                </Typography>\n                </Grid>\n\n                <Grid item  md={2}  xs={2} style={{verticalAlign: \"bottom\"}} >\n                <Typography variant=\"h7\"  >\n                    Menu &nbsp; <FontAwesomeIcon icon={faList} />\n                \n                \n                </Typography>\n                \n                </Grid>\n\n                \n\n                </Grid>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Navbar;","import { Grid } from '@material-ui/core';\nimport React from 'react';\n\nimport './App.css';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n\n    <div className=\"App\" >\n\n      <div className=\"divNav\" >\n        <Navbar />\n      </div>\n\n      <div className=\"paraDiv\" style={{ color: \"white\" }}>\n        <h1 > MADE WITH LOVE</h1>\n        &nbsp;&nbsp; Maecenas interdum nisl\n      <br />\n      &nbsp; &nbsp; &nbsp;sit amet pulvinar volupat.\n       <br />\n       &nbsp; &nbsp; &nbsp;felis eu neque vehicula fringialla\n\n      </div>\n      <div className=\"ButtonDiv\">\n        <button>EXPLORE</button>\n      </div>\n      <div className=\"roundButton\">\n        <button></button>\n        <button style={{backgroundColor:\"#f0b520\"}}></button>\n        <button></button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}